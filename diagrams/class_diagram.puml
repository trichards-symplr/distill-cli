@startuml

class Opt {
  - input_audio_file: String
  - output_type: OutputType
  - summary_file_name: String
  - language_code: String
  - delete_s3_object: String
  - save_transcript: bool
}

enum OutputType {
  Terminal
  Text
  Word
  Markdown
  Slack
  SlackSplit
  Teams
  TeamsSplit
}

class Main {
  - get_teams_card_title(): String
  - select_webhooks(settings: &Config, service: &str): Result<Vec<usize>>
  - select_slack_webhooks(settings: &Config): Result<Vec<usize>>
  - select_teams_webhooks(settings: &Config): Result<Vec<usize>>
  - select_bucket(s3_client: &Client, s3_bucket_name: &str): Result<String>
  - load_settings(): Result<Config>
  + main(): Result<()>
}

class AWSUtils {
  + load_config(region: Option<Region>): SdkConfig
  + list_buckets(client: &Client): Result<Vec<String>>
  + bucket_region(client: &Client, bucket_name: &str): Result<Region>
}

class Transcribe {
  + transcribe_audio(config: &SdkConfig, file_path: &Path, s3_uri: &str, spinner: &mut Spinner, language_code: &str): Result<String>
}

class Summarize {
  + summarize_text(config: &SdkConfig, text: &str, spinner: &mut Spinner): Result<String>
}

class Output {
  + static SPINNER_STOPPED: AtomicBool
  + reset_spinner_flag(): void
  + write_text_file(summary_file_name: &str, summarized_text: &str, spinner: &mut Spinner): Result<()>
  + write_word_file(summary_file_name: &str, summarized_text: &str, spinner: &mut Spinner): Result<()>
  + write_markdown_file(summary_file_name: &str, summarized_text: &str, spinner: &mut Spinner): Result<()>
  + send_slack_notification(settings: &Config, spinner: &mut Spinner, summarized_text: &str, webhook_indices: &[usize]): Result<()>
  + send_teams_notification(settings: &Config, spinner: &mut Spinner, summarized_text: &str, user_input: &str, success_message: &str, webhook_indices: &[usize]): Result<()>
}

Main --> Opt : uses
Main --> OutputType : uses
Main --> AWSUtils : uses
Main --> Transcribe : uses
Main --> Summarize : uses
Main --> Output : uses
Opt *-- OutputType : contains

@enduml